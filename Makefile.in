# @configure_input@

.DELETE_ON_ERROR:


# TODO: objects in build directory

# TODO: LOG_FILE should be a path?

HAS_DLOG_SO_P := $(shell test -f bin/dlog-make.so && test -f bin/dlog-r.so && echo yes)
 ifeq ($(HAS_DLOG_SO_P), yes)
load bin/dlog-make.so
 endif




##### ENVIRONMENT VARIABLES #####

NYPL_RAW_DATA_LOC := @NYPL_RAW_DATA_LOC@
export NYPL_RAW_DATA_LOC

EZPROXY_LOGS_LOC := @EZPROXY_LOGS_LOC@
export EZPROXY_LOGS_LOC


CC 			:= @CC@
CXX 		:= @CXX@
# TODO: parameterize this?
LOG_FILE 	:= build.log
ISO8601D	:= $(shell date -I)
ISO8601DT	:= $(shell date -Iseconds)
CY          := $(shell date +%Y)

CXXFLAGS  := -std=c++2b -O2 -I. -Wall -Wextra -Werror -Wpedantic -Wshadow
CXXFLAGS  += -Wconversion -Wsign-conversion -Wunreachable-code
CXXFLAGS  += -Weffc++ -Wmissing-braces -Wnon-virtual-dtor -Winline
CXXFLAGS  += -Wnormalized -Wold-style-cast -Wrange-loop-construct
CXXFLAGS  += -Wreturn-local-addr -Wredundant-move -Wsuggest-final-types
CXXFLAGS  += -Wsuggest-override -Wvirtual-inheritance -Wvirtual-move-assign
CXXFLAGS  += -Wuninitialized -Wswitch-enum -Wswitch




# ----------------------------------------------------------------------- #
### Putting together all the targets 								  	###

 ifneq ($(HAS_DLOG_SO_P), yes)

all: begin bin/dlog-make.so bin/dlog-r.so pleaserunagain

 else

all: begin docs ezproxy end

 endif
# ----------------------------------------------------------------------- #


# ----------------------------------------------------------------------- #
### shared library pre-prerequisites

# TODO: group into PHONY target?!

bin/dlog-make.so: src/dlog.c
	@ echo bin thing
	$(CC) -shared -fPIC -o $@ $< -lsystemd -DFOR_GNU_MAKE -DLOG_FILE=\"$(LOG_FILE)\"

bin/dlog-r.so: src/dlog.c
	@ echo bin thing
	R CMD SHLIB -c -o $@ $< -lsystemd
# ----------------------------------------------------------------------- #


# ----------------------------------------------------------------------- #
.PHONY: docs
README.md: m4/make-markdown.m4 DOCUMENTATION.in
	m4 -P $^ > $@

# TODO: remove this after test
README.pdf: README.md
	pandoc -s -o $@ $<

ezproxy/README.md: m4/make-markdown.m4 ezproxy/README.in
	m4 -P m4/make-markdown.m4 -DDM_BEGIN_COLLAPSIBLE="m4_dnl" -D DM_END_COLLAPSIBLE="m4_dnl" -DDM_END_IMPORT_SECTION="DM_CLEARDIVERT(5)" ezproxy/README.in > $@

docs: README.md README.pdf ezproxy/README.md

# TODO: —_—
# ----------------------------------------------------------------------- #




### EZPROXY ###############################################################

### EZPROXY compilation ####

EZ_EXE := bin/ezproxy/step-1-clean-raw-logs
EZ_INCDIR := ezproxy/include
EZ_INCFLAGS := -I$(EZ_INCDIR)
EZ_CXXFLAGS := $(CXXFLAGS) -DIOSTREAMINPUT
EZ_LDLIBS := -lfmt

$(EZ_EXE): build/ezproxy/step-1-clean-raw-logs.o build/ezproxy/glob.o
	$(CXX) -o $@ $^ $(EZ_CXXFLAGS) $(EZ_INCFLAGS) $(EZ_LDLIBS)

build/ezproxy/step-1-clean-raw-logs.o: ezproxy/src/step-1-clean-raw-logs.cpp
	$(CXX) -c $< $(EZ_CXXFLAGS) $(EZ_INCFLAGS) $(EZ_LDLIBS) -o $@

build/ezproxy/glob.o: ezproxy/src/glob.cpp
	$(CXX) -c $< -O2 $(EZ_INCFLAGS) -o $@

############################

MOST_RECENT_EZPROXY_LOG := $(EZPROXY_LOGS_LOC)/logs/i.ezproxy.nypl.org.$(ISO8601D).log

.PHONY: ezproxy
ezproxy: $(EZ_EXE)

# $(EZPROXY_LOGS_LOC)/logs/i.ezproxy.nypl.org.$(ISO8601D).log: ezproxy/step-0-sync-logs.sh
# 	echo $(MOST_RECENT_EZPROXY_LOG)
# 	./ezproxy/step-0-sync-logs.sh
#
# .PHONY: thisshouldntrun
# thisshouldntrun:
# 	echo "BIG F******* ERROR"

###########################################################################



.PHONY: debug
debug:
	$(dlog hi, hi)
	@ echo $(ISO8601D)
	@ echo $(ISO8601DT)
	@ echo $(CY)
	@ echo HAS MAKE SO: $(HAS_DLOG_SO_P)
	@ echo NYPL_RAW_DATA_LOC is $(NYPL_RAW_DATA_LOC)
	@ echo EZPROXY_LOGS_LOC is $(EZPROXY_LOGS_LOC)


# TODO: do better with necessary directories
.PHONY: begin
begin:
	@ echo starting
	@ mkdir -p build/ezproxy
	@ mkdir -p bin/ezproxy

.PHONY: pleaserunagain
pleaserunagain:
	@ echo
	@ echo Setup complete... please re-run "make"
	@ exit 0

.PHONY: end
end:
	@ echo ending

# TODO: PARAMETERIZE!

.PHONY: clean
clean:
	@ echo "cleaning"
	rm -rf build bin

.PHONY: mrproper
mrproper: clean
	@ rm -rf autom4te.cache/
	@ rm -f config.log Makefile config.status configure configure~ compile install-sh missing aclocal.m4 stamp-h1 configure.scan config.h autoscan.log config.guess config.sub config.h.in README.md README.pdf ezproxy/README.md
# TODO: first off, this is horrible
#       subordinate READMEs need to be in a variable
#       and a lot of other stuff
#       Speaking of "way", by the way, should those be in `make clean` or `make mrproper`



# TODO: override the autotools default targets that don't make sense
#         pero bonito

.PHONY: install
install:
	@ echo nothing to install



